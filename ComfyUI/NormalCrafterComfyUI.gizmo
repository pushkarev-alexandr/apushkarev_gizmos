Group {
 name NormalCrafterComfyUI1
 onCreate "from urllib import request, error\n\ndef check_comfyui_server_connection(url=None, show_success_message=False, timeout=2):\n    \"\"\"\n    Checks if a server is reachable at the given URL.\n    \n    Parameters:\n        url (str): The server address to check.\n        timeout (int): Timeout in seconds for the request (default is 2).\n        show_success_message (bool): Whether to show a success message if the server is up (default is False).\n        \n    Returns:\n        bool: True if the server is reachable, False otherwise.\n    \"\"\"\n    if url==None:\n        url = nuke.thisNode()\[\"server_address\"].value()\n    try:\n        with request.urlopen(url, timeout=timeout) as response:\n            if response.status == 200:\n                if show_success_message:\n                    nuke.message(\"The server is up and responding.\")\n                return True\n            else:\n                nuke.message(f\"The server responded, but returned status code: \{response.status\}\")\n                return False\n    except error.HTTPError as e:\n        nuke.message(f\"The server returned an HTTP error: \{e.code\}\")\n        return False\n    except error.URLError as e:\n        nuke.message(\n            f\"Connection error: \{e.reason\}\\n\"\n            \"Please make sure the address is correct and the server is running.\"\n        )\n        return False\n\nfirst_frame = nuke.thisNode()\[\"first_frame\"]\nlast_frame = nuke.thisNode()\[\"last_frame\"]\nif first_frame.value()==-1 and last_frame.value()==-1:\n    first_frame.setValue(nuke.root().firstFrame())\n    last_frame.setValue(nuke.root().lastFrame())\n"
 addUserKnob {20 user_tab l NormalCrafterComfyUI}
 addUserKnob {4 view M {source result ""}}
 addUserKnob {3 first_frame l "frame range"}
 first_frame -1
 addUserKnob {3 last_frame l "" -STARTLINE}
 last_frame -1
 addUserKnob {22 execute l Execute T "from urllib import request\nimport os, json, time, tempfile\nimport nuke # type: ignore\n\njson_string = '\{\"1\": \{\"inputs\": \{\"filepath\": \"path/to/frame%04d.exr\", \"tonemap\": \"linear\", \"start_frame\": 1001, \"end_frame\": 1001\}, \"class_type\": \"LoadEXRFrames\", \"_meta\": \{\"title\": \"Load EXR Frames\"\}\}, \"2\": \{\"inputs\": \{\"filepath\": \"path/to/frame%04d.exr\", \"tonemap\": \"linear\", \"start_frame\": 1001, \"overwrite\": true, \"save_workflow\": \"none\", \"images\": \[\"3\", 0]\}, \"class_type\": \"SaveEXRFrames\", \"_meta\": \{\"title\": \"Save EXR Frames\"\}\}, \"3\": \{\"inputs\": \{\"seed\": 42, \"max_res_dimension\": 1024, \"window_size\": 14, \"time_step_size\": 10, \"decode_chunk_size\": 4, \"offload_pipe_to_cpu_on_finish\": true, \"images\": \[\"1\", 0]\}, \"class_type\": \"NormalCrafterNode\", \"_meta\": \{\"title\": \"NormalCrafter (Process Video)\"\}\}\}'\n\ndef main():\n    node = nuke.thisNode()\n    first_frame = int(node\[\"first_frame\"].value())\n    last_frame = int(node\[\"last_frame\"].value())\n    server = node\[\"server_address\"].value().rstrip(\"/\")\n    \n    if not check_comfyui_server_connection(server):\n        return\n    \n    rootname = nuke.root().name()\n    basefolder = tempfile.gettempdir().replace(\"\\\\\",\"/\") if rootname==\"Root\" else os.path.dirname(rootname)\n    normalcrafter_folder = f\"\{basefolder\}/NormalCrafter\"\n    count = 1\n    if os.path.isdir(normalcrafter_folder):\n        while True:\n            if not os.path.isdir(f\"\{normalcrafter_folder\}/src\{count\}\"):\n                break\n            count += 1\n    src_path = f\"\{normalcrafter_folder\}/src\{count\}/src\{count\}.%04d.exr\"\n    res_path = f\"\{normalcrafter_folder\}/result\{count\}/result\{count\}.%04d.exr\"\n    \n    write = nuke.toNode(\"Write1\")\n    write\[\"file\"].setValue(src_path)\n    nuke.execute(write, first_frame, last_frame)\n    \n    prompt = json.loads(json_string)\n    \n    prompt\[\"1\"]\[\"inputs\"]\[\"filepath\"] = src_path\n    prompt\[\"1\"]\[\"inputs\"]\[\"start_frame\"] = first_frame\n    prompt\[\"1\"]\[\"inputs\"]\[\"end_frame\"] = last_frame\n    \n    prompt\[\"2\"]\[\"inputs\"]\[\"filepath\"] = res_path\n    prompt\[\"2\"]\[\"inputs\"]\[\"start_frame\"] = first_frame\n\n    data = json.dumps(\{\"prompt\": prompt\}).encode(\"utf-8\")\n    req =  request.Request(server+\"/prompt\", data=data)\n    response = request.urlopen(req, timeout=5)\n    prompt_id = json.loads(response.read())\[\"prompt_id\"]\n    \n    progress = nuke.ProgressTask('Waiting for ComfyUI...')\n    count = 0\n    while True:\n        if progress.isCancelled():\n            del(progress)\n            return\n        progress.setProgress(count)\n        response = request.urlopen(request.Request(server+\"/history\"))\n        history = json.loads(response.read())\n        if prompt_id in history:\n            break\n        if count<99: count += 1\n        time.sleep(1)\n    del(progress)\n    \n    status = history\[prompt_id]\[\"status\"]\n    if status\[\"status_str\"]==\"error\":\n        error = status\[\"messages\"]\[2]\[1]\n        nuke.message(f\"ERROR\\nnode_type: \{error\['node_type']\}\\nexception_message: \{error\['exception_message']\}\\nexception_type: \{error\['exception_type']\}\")\n        return\n    \n    node\[\"view\"].setValue(\"result\")\n    read = nuke.toNode(\"Read1\")\n    read\[\"file\"].fromUserText(f\"\{res_path\} \{first_frame\}-\{last_frame\}\")\n\n    nuke.message(\"Success!\")\n\nmain()\n" +STARTLINE}
 addUserKnob {26 version_author l "" +STARTLINE T "<span style=\"color:#666\"><br/><b>NormalCrafterComfyUI v1.0</b> | Pushkarev Aleksandr | 2025</span>"}
 addUserKnob {20 server_tab l Server}
 addUserKnob {1 server_address l "server address"}
 server_address http://127.0.0.1:8188
 addUserKnob {22 test_connection l "Test Connection" -STARTLINE T "check_comfyui_server_connection(None, True)"}
 addUserKnob {22 open_comfy l "Open ComfyUI" T "import webbrowser\n\nwebbrowser.open(nuke.thisNode()\[\"server_address\"].value())" +STARTLINE}
}
 Read {
  inputs 0
  file_type exr
  origset true
  colorspace "Output - sRGB"
  name Read1
  xpos 123
  ypos 228
 }
 Input {
  inputs 0
  name Input
  xpos 0
 }
 Crop {
  box {0 0 {width} {height}}
  crop false
  name Crop1
  xpos 0
  ypos 116
 }
set N1c586000 [stack 0]
 Switch {
  inputs 2
  which {{parent.view}}
  name Switch1
  xpos 0
  ypos 258
 }
 Output {
  name Output1
  xpos 0
  ypos 416
 }
push $N1c586000
 Write {
  channels rgba
  file_type exr
  first_part rgba
  colorspace "Output - sRGB"
  create_directories true
  version 39
  ocioColorspace scene_linear
  display ACES
  view sRGB
  name Write1
  xpos -126
  ypos 169
  addUserKnob {20 User}
  addUserKnob {43 csp l colorspace +INVISIBLE}
  csp "\[set csp \[value colorspace]\nset in \[list \"ACES - ACES2065-1\" \"ACES - ACEScg\" \"Output - sRGB\" \"Output - Rec.709\" \"Utility - Linear - sRGB\" \"Utility - sRGB - Texture\"]\nset out \[list aces acescg srgb rec709 linear texture]\nset i \[lsearch \$in \$csp]\nif \{\[value raw]\} \{return raw\} elseif \{\$i != -1\} \{lindex \$out \$i\}]"
 }
end_group
