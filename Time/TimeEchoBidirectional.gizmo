Group {
name TimeEchoBidirectional1
knobChanged "import nukescripts\n\nnode = nuke.thisNode()\nkn = nuke.thisKnob()\nif kn.name()=='backward' or kn.name()=='forward':\n    merges = \[nuke.toNode('Merge1'),nuke.toNode('Merge2')]\n    \n    #validate values\n    if kn.isAnimated():#animation is not alowed\n        kn.clearAnimated()\n    if kn.value()<0:\n        kn.setValue(0)\n    elif kn.value()>=merges\[0].maxInputs():\n        kn.setValue(merges\[0].maxInputs()-1)\n    \n    #disconnect all merge inputs from TimeOffsets except first two inputs\n    for m in merges:\n        for i in range(m.inputs()):\n            if i>1:\n                m.setInput(i,None)\n    #delete all TimeOffsets to create new\n    for to in nuke.allNodes('TimeOffset'):\n        if to.name()!='TimeOffset1' and to.name()!='TimeOffset2':\n            nuke.delete(to)\n    #create and place new TimeOffsets\n    for j,bfMode in enumerate(\['backward','forward']):\n        newTO = \[]\n        nukescripts.clear_selection_recursive()\n        for i in range(int(node\[bfMode].value()-1)):\n            to = nuke.createNode('TimeOffset',inpanel=False)\n            newTO.append(to)\n            to\['time_offset'].setValue(-2*j+1)\n            if i==0:\n                to.setInput(0,nuke.toNode('TimeOffset'+str(j+1)))\n                to.autoplace()\n        #connect merge to all new TimeOffsets\n        for to in newTO:\n            merges\[j].connectInput(0,to)\nelif kn.name()=='operation':\n    for i in range(3):\n        opKn = nuke.toNode('Merge'+str(i+1))\['operation']\n        if kn.value()=='average':\n            opKn.setValue('plus')\n        else:\n            opKn.setValue(kn.value())"
tile_color 0xb0a45d00
addUserKnob {20 user_tab l TimeEchoBidirectional}
addUserKnob {4 operation M {plus max min average "" ""}}
operation max
addUserKnob {3 backward}
addUserKnob {3 forward}
addUserKnob {26 version_author l "" +STARTLINE T "<span style=\"color:#666\"><br/><b>TimeEchoBidirectional v1.1</b> | Pushkarev Aleksandr | 2024</span>"}
}
Input {
inputs 0
name Input
xpos 2
ypos -48
}
Dot {
name Dot1
xpos 36
ypos 61
}
set Nd3968400 [stack 0]
Dot {
name Dot3
xpos 165
ypos 61
}
set Nd3968800 [stack 0]
Dot {
name Dot4
xpos 275
ypos 61
}
TimeOffset {
time_offset -1
time ""
name TimeOffset2
xpos 241
ypos 169
}
push $Nd3968800
Merge2 {
inputs 2
operation max
also_merge all
name Merge2
xpos 131
ypos 169
disable {{!forward}}
}
Grade {
channels all
whitepoint {{forward+1}}
black_clamp false
name Grade2
xpos 131
ypos 230
disable {{operation!=3||!forward}}
}
Dot {
name Dot5
xpos 165
ypos 321
}
set Ne9e97c00 [stack 0]
Dot {
name Dot6
xpos 165
ypos 436
}
push $Ne9e97c00
push $Nd3968400
Dot {
name Dot2
xpos -74
ypos 61
}
TimeOffset {
time_offset 1
time ""
name TimeOffset1
xpos -108
ypos 167
}
push $Nd3968400
Merge2 {
inputs 2
operation max
also_merge all
name Merge1
xpos 2
ypos 167
disable {{!backward}}
}
Grade {
channels all
whitepoint {{backward+1}}
black_clamp false
name Grade1
xpos 2
ypos 226
disable {{operation!=3||!backward}}
}
Merge2 {
inputs 2
operation max
also_merge all
name Merge3
xpos 2
ypos 318
disable {{!(backward&&forward)}}
}
Grade {
channels all
whitepoint 2
black_clamp false
name Grade3
xpos 2
ypos 361
disable {{operation!=3||!(backward&&forward)}}
}
Switch {
inputs 2
which {{!backward&&forward}}
name Switch1
xpos 2
ypos 433
}
Output {
name Output1
xpos 2
ypos 490
}
end_group
